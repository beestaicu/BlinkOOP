
Button_LED_swtich.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001de  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  00000282  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000841  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fe  00000000  00000000  00000b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033d  00000000  00000000  00001263  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003be  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017b  00000000  00000000  000019b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  9e:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <led_switch>:
	
}


int led_switch(){
	PORTD = 0X00;       // Initialise portD pins all is low
  a6:	1b b8       	out	0x0b, r1	; 11
	PORTD = 0b10101010; // Set port1,3,5,7 is high, 0,2,4,6 is low
  a8:	8a ea       	ldi	r24, 0xAA	; 170
  aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <led_switch+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <led_switch+0x16>
  bc:	00 00       	nop
	_delay_ms(1000);    // Delay one second
	PORTD = 0b01010101; // Set port port 1,3,5,7 is low, 0,2,4,6 is high
  be:	85 e5       	ldi	r24, 0x55	; 85
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	83 ed       	ldi	r24, 0xD3	; 211
  c6:	90 e3       	ldi	r25, 0x30	; 48
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <led_switch+0x22>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <led_switch+0x2c>
  d2:	00 00       	nop
	_delay_ms(1000);    // Delay one second
}
  d4:	08 95       	ret

000000d6 <led_circle>:

int led_circle(){
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	60 97       	sbiw	r28, 0x10	; 16
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
	PORTD = 0X00;                // Initialise portD all is low
  ea:	1b b8       	out	0x0b, r1	; 11
	int array[8] = {PORTD0, PORTD1, PORTD2, PORTD3, PORTD4, PORTD5, PORTD6, PORTD7}; // Define an arrray for store the portd pins
  ec:	80 e1       	ldi	r24, 0x10	; 16
  ee:	e0 e0       	ldi	r30, 0x00	; 0
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	de 01       	movw	r26, r28
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	01 90       	ld	r0, Z+
  f8:	0d 92       	st	X+, r0
  fa:	8a 95       	dec	r24
  fc:	e1 f7       	brne	.-8      	; 0xf6 <led_circle+0x20>
  fe:	de 01       	movw	r26, r28
 100:	11 96       	adiw	r26, 0x01	; 1
 102:	fe 01       	movw	r30, r28
 104:	71 96       	adiw	r30, 0x11	; 17
	int i,j;                     // define i and j
	for (i = 0; i <8; i++){ 
		PORTD |= (1<<array[i]);  // Set port0->7 to high one-by-one
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	50 e0       	ldi	r21, 0x00	; 0
 10a:	2b b1       	in	r18, 0x0b	; 11
 10c:	8c 91       	ld	r24, X
 10e:	12 96       	adiw	r26, 0x02	; 2
 110:	ba 01       	movw	r22, r20
 112:	02 c0       	rjmp	.+4      	; 0x118 <led_circle+0x42>
 114:	66 0f       	add	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	8a 95       	dec	r24
 11a:	e2 f7       	brpl	.-8      	; 0x114 <led_circle+0x3e>
 11c:	cb 01       	movw	r24, r22
 11e:	82 2b       	or	r24, r18
 120:	8b b9       	out	0x0b, r24	; 11
 122:	7f ef       	ldi	r23, 0xFF	; 255
 124:	81 ee       	ldi	r24, 0xE1	; 225
 126:	94 e0       	ldi	r25, 0x04	; 4
 128:	71 50       	subi	r23, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <led_circle+0x52>
 130:	00 c0       	rjmp	.+0      	; 0x132 <led_circle+0x5c>
 132:	00 00       	nop

int led_circle(){
	PORTD = 0X00;                // Initialise portD all is low
	int array[8] = {PORTD0, PORTD1, PORTD2, PORTD3, PORTD4, PORTD5, PORTD6, PORTD7}; // Define an arrray for store the portd pins
	int i,j;                     // define i and j
	for (i = 0; i <8; i++){ 
 134:	ae 17       	cp	r26, r30
 136:	bf 07       	cpc	r27, r31
 138:	41 f7       	brne	.-48     	; 0x10a <led_circle+0x34>
 13a:	be 01       	movw	r22, r28
 13c:	6d 5f       	subi	r22, 0xFD	; 253
 13e:	7f 4f       	sbci	r23, 0xFF	; 255
		PORTD |= (1<<array[i]);  // Set port0->7 to high one-by-one
		_delay_ms(100);
	}
	for (j = 7; j >0; j--){
		PORTD &=~ (1<<array[j]); // Set port 7->0 to low one-by-one
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	9b b1       	in	r25, 0x0b	; 11
 146:	32 97       	sbiw	r30, 0x02	; 2
 148:	9a 01       	movw	r18, r20
 14a:	00 80       	ld	r0, Z
 14c:	02 c0       	rjmp	.+4      	; 0x152 <led_circle+0x7c>
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <led_circle+0x78>
 156:	82 2f       	mov	r24, r18
 158:	80 95       	com	r24
 15a:	89 23       	and	r24, r25
 15c:	8b b9       	out	0x0b, r24	; 11
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	81 ee       	ldi	r24, 0xE1	; 225
 162:	94 e0       	ldi	r25, 0x04	; 4
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <led_circle+0x8e>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <led_circle+0x98>
 16e:	00 00       	nop
	int i,j;                     // define i and j
	for (i = 0; i <8; i++){ 
		PORTD |= (1<<array[i]);  // Set port0->7 to high one-by-one
		_delay_ms(100);
	}
	for (j = 7; j >0; j--){
 170:	e6 17       	cp	r30, r22
 172:	f7 07       	cpc	r31, r23
 174:	39 f7       	brne	.-50     	; 0x144 <led_circle+0x6e>
		PORTD &=~ (1<<array[j]); // Set port 7->0 to low one-by-one
		_delay_ms(100);
	}
 176:	60 96       	adiw	r28, 0x10	; 16
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <main>:
int led_circle(); // Define circle function
int i = 0;

int main(void)
{
	DDRD = 0XFF;        // Set port D all is output
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00000001;  // Set B0 as input
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	84 b9       	out	0x04, r24	; 4
	PINB |= 0b00000001; // Set B0 connect to pull-up resistor
 190:	18 9a       	sbi	0x03, 0	; 3
			}
		}
	}*/
		if (!(PINB & 0b00000001)){
			if (i == 0){
				i = 1;
 192:	c1 e0       	ldi	r28, 0x01	; 1
 194:	d0 e0       	ldi	r29, 0x00	; 0
				led_switch();
				_delay_ms(100);
			}
		}
	}*/
		if (!(PINB & 0b00000001)){
 196:	18 99       	sbic	0x03, 0	; 3
 198:	12 c0       	rjmp	.+36     	; 0x1be <main+0x36>
			if (i == 0){
 19a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 19e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	29 f4       	brne	.+10     	; 0x1b0 <main+0x28>
				i = 1;
 1a6:	d0 93 11 01 	sts	0x0111, r29	; 0x800111 <__data_end+0x1>
 1aa:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <__data_end>
 1ae:	12 c0       	rjmp	.+36     	; 0x1d4 <main+0x4c>
			}
			else if(i == 1){
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	89 f7       	brne	.-30     	; 0x196 <main+0xe>
				i = 0;
 1b4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 1b8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <main+0x42>
			}
			
			
		}
		
			if (i == 0){
 1be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1c2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <main+0x48>
					led_circle();
 1ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <led_circle>
 1ce:	e3 cf       	rjmp	.-58     	; 0x196 <main+0xe>
			}
	
				else if (i ==1){
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	09 f7       	brne	.-62     	; 0x196 <main+0xe>
						led_switch();
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <led_switch>
 1d8:	de cf       	rjmp	.-68     	; 0x196 <main+0xe>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
