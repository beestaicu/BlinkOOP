
LED_Button_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001f2  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000889  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000714  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033d  00000000  00000000  000012dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cf  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000219  00000000  00000000  00001a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  9e:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
void led_switch();
void led_circle();
uint8_t button_state();
uint8_t i=0;

ISR(INT0_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	i^=1; // toggles the state of variable i
  b6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	98 27       	eor	r25, r24
  be:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <__data_end>
	PORTC ^= (1<<PINC0); //toggles the state of LED on PINC0 
  c2:	98 b1       	in	r25, 0x08	; 8
  c4:	89 27       	eor	r24, r25
  c6:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	85 ea       	ldi	r24, 0xA5	; 165
  cc:	9e e0       	ldi	r25, 0x0E	; 14
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <__vector_1+0x28>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_1+0x32>
  d8:	00 00       	nop
	_delay_ms(300); 
}
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <led_switch>:
		led_circle();
		} 
	} // end while
} // end main
void led_switch(){
	PORTD = 0b10101010; // Set port 1,3,5,7 is high, 0,2,4,6 is low
  ea:	8a ea       	ldi	r24, 0xAA	; 170
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	81 ee       	ldi	r24, 0xE1	; 225
  f2:	94 e0       	ldi	r25, 0x04	; 4
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <led_switch+0xa>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <led_switch+0x14>
  fe:	00 00       	nop
	_delay_ms(100);
	PORTD = 0b01010101; // Set port 1,3,5,7 is low, 0,2,4,6 is high
 100:	85 e5       	ldi	r24, 0x55	; 85
 102:	8b b9       	out	0x0b, r24	; 11
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	81 ee       	ldi	r24, 0xE1	; 225
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <led_switch+0x20>
 112:	00 c0       	rjmp	.+0      	; 0x114 <led_switch+0x2a>
 114:	00 00       	nop
 116:	08 95       	ret

00000118 <led_circle>:
	_delay_ms(100);
}

void led_circle(){
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	60 97       	sbiw	r28, 0x10	; 16
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
	// Define an array for store
	int array[8] = {PORTD0, PORTD1, PORTD2, PORTD3, PORTD4, PORTD5, PORTD6, PORTD7};
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	de 01       	movw	r26, r28
 134:	11 96       	adiw	r26, 0x01	; 1
 136:	01 90       	ld	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	8a 95       	dec	r24
 13c:	e1 f7       	brne	.-8      	; 0x136 <led_circle+0x1e>
 13e:	de 01       	movw	r26, r28
 140:	11 96       	adiw	r26, 0x01	; 1
 142:	fe 01       	movw	r30, r28
 144:	71 96       	adiw	r30, 0x11	; 17
	int i,j;
	for (i = 0; i <8; i++){
		PORTD |= (1 <<array[i]); // set port 0->7 to high one-by-one
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	2b b1       	in	r18, 0x0b	; 11
 14c:	8c 91       	ld	r24, X
 14e:	12 96       	adiw	r26, 0x02	; 2
 150:	ba 01       	movw	r22, r20
 152:	02 c0       	rjmp	.+4      	; 0x158 <led_circle+0x40>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <led_circle+0x3c>
 15c:	cb 01       	movw	r24, r22
 15e:	82 2b       	or	r24, r18
 160:	8b b9       	out	0x0b, r24	; 11
 162:	7f ef       	ldi	r23, 0xFF	; 255
 164:	81 ee       	ldi	r24, 0xE1	; 225
 166:	94 e0       	ldi	r25, 0x04	; 4
 168:	71 50       	subi	r23, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <led_circle+0x50>
 170:	00 c0       	rjmp	.+0      	; 0x172 <led_circle+0x5a>
 172:	00 00       	nop

void led_circle(){
	// Define an array for store
	int array[8] = {PORTD0, PORTD1, PORTD2, PORTD3, PORTD4, PORTD5, PORTD6, PORTD7};
	int i,j;
	for (i = 0; i <8; i++){
 174:	ae 17       	cp	r26, r30
 176:	bf 07       	cpc	r27, r31
 178:	41 f7       	brne	.-48     	; 0x14a <led_circle+0x32>
 17a:	be 01       	movw	r22, r28
 17c:	6d 5f       	subi	r22, 0xFD	; 253
 17e:	7f 4f       	sbci	r23, 0xFF	; 255
		PORTD |= (1 <<array[i]); // set port 0->7 to high one-by-one
		_delay_ms(100);
	}
	for (j = 7; j >0;j--){
		PORTD &=~ (1<<array[j]); // set port 7->0 to low one-by-one
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	9b b1       	in	r25, 0x0b	; 11
 186:	32 97       	sbiw	r30, 0x02	; 2
 188:	9a 01       	movw	r18, r20
 18a:	00 80       	ld	r0, Z
 18c:	02 c0       	rjmp	.+4      	; 0x192 <led_circle+0x7a>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <led_circle+0x76>
 196:	82 2f       	mov	r24, r18
 198:	80 95       	com	r24
 19a:	89 23       	and	r24, r25
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	81 ee       	ldi	r24, 0xE1	; 225
 1a2:	94 e0       	ldi	r25, 0x04	; 4
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <led_circle+0x8c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <led_circle+0x96>
 1ae:	00 00       	nop
	int i,j;
	for (i = 0; i <8; i++){
		PORTD |= (1 <<array[i]); // set port 0->7 to high one-by-one
		_delay_ms(100);
	}
	for (j = 7; j >0;j--){
 1b0:	e6 17       	cp	r30, r22
 1b2:	f7 07       	cpc	r31, r23
 1b4:	39 f7       	brne	.-50     	; 0x184 <led_circle+0x6c>
		PORTD &=~ (1<<array[j]); // set port 7->0 to low one-by-one
		_delay_ms(100);
	}
	
 1b6:	60 96       	adiw	r28, 0x10	; 16
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <main>:
	_delay_ms(300); 
}

int main(void)
{
DDRD = 0b11111011; // set port d as output apart d2 input
 1c8:	8b ef       	ldi	r24, 0xFB	; 251
 1ca:	8a b9       	out	0x0a, r24	; 10
DDRC = 0xff; // set all pins on port c as output
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	87 b9       	out	0x07, r24	; 7
PORTD = 0X00; // initialize all port d to low
 1d0:	1b b8       	out	0x0b, r1	; 11
EIMSK |= (1<<INT0); // Turns on INT0 (on pin D2)
 1d2:	e8 9a       	sbi	0x1d, 0	; 29
sei();
 1d4:	78 94       	sei


    while (1) 
    {
		if (i == 1){
 1d6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	19 f4       	brne	.+6      	; 0x1e4 <main+0x1c>
			led_switch();
 1de:	0e 94 75 00 	call	0xea	; 0xea <led_switch>
 1e2:	f9 cf       	rjmp	.-14     	; 0x1d6 <main+0xe>
    }
	else if (i == 0){
 1e4:	81 11       	cpse	r24, r1
 1e6:	f7 cf       	rjmp	.-18     	; 0x1d6 <main+0xe>
		led_circle();
 1e8:	0e 94 8c 00 	call	0x118	; 0x118 <led_circle>
 1ec:	f4 cf       	rjmp	.-24     	; 0x1d6 <main+0xe>

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
